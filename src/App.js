import React, { useState } from 'react';
import {
  Layout,
  Menu,
  Button,
  Typography,
  Avatar,
  Space,
  Table,
  Tag,
  Row,
  Col,
  Form,
  Input,
  InputNumber,
  Select,
  DatePicker,
  Card,
  Divider,
  ConfigProvider,
  Anchor,
  Collapse,
  Modal,
  Alert,
  Dropdown,
  Checkbox,
} from 'antd';
import {
  AppstoreOutlined,
  ContainerOutlined,
  PlusOutlined,
  MoreOutlined,
  GlobalOutlined,
  CopyOutlined,
  ImportOutlined,
  WarningFilled,
  DeleteOutlined,
  CaretDownOutlined,
  CodeOutlined,
  EditOutlined,
  CloseOutlined,
  SaveOutlined,
  DownOutlined,
  SearchOutlined,
  HomeOutlined,
  UserOutlined,
  SettingOutlined,
} from '@ant-design/icons';


const { Header, Sider, Content } = Layout;
const { Title, Text, Link, Paragraph } = Typography;
const { Option } = Select;
const { Panel } = Collapse;
const { Link: AnchorLink } = Anchor;
const { TextArea } = Input;

// --- MOCK DATA & SHARED COMPONENTS ---
const inventoryData = [
    { key: '1', orderNumber: 'SO2503170002', customer: '666-555', plannedDelivery: '2025-03-04', priority: 'normal', status: 'not dispatched' },
    { key: '2', orderNumber: 'SO2503170001', customer: 'This is a test', plannedDelivery: '2025-03-04', priority: 'high', status: 'not dispatched' },
    { key: '3', orderNumber: 'SO2501130001', customer: 'This is a test', plannedDelivery: '2025-03-13', priority: 'urgent', status: 'not dispatched' },
];

const PriorityTag = ({ priority }) => {
  const color = { urgent: 'volcano', high: 'red', low: 'geekblue' }[priority] || 'default';
  return <Tag color={color}>{priority.toUpperCase()}</Tag>;
};

const StatusTag = ({ status }) => {
  const color = { 'not dispatched': 'orange', collected: 'green' }[status] || 'default';
  return <Tag color={color}>{status.toUpperCase()}</Tag>;
};

// --- MULTI-LANGUAGE & EDITABLE CONTENT ---
const initialContent = {
    en: {
        appTitle: 'Component Documentation',
        overview: 'Overview',
        general: 'General',
        layout: 'Layout',
        dataDisplay: 'Data Display',
        dataEntry: 'Data Entry',
        // Components
        typography: 'Typography',
        button: 'Button',
        icon: 'Icon',
        grid: 'Grid',
        space: 'Space',
        dropdown: 'Dropdown',
        checkbox: 'Checkbox',
        table: 'Table',
        tag: 'Tag',
        form: 'Form',
        // Descriptions
        overviewDescription: 'Welcome to the component documentation. This is a live design system that showcases the building blocks of our application. Use the menu on the left to navigate between components.',
        typographyDescription: 'A showcase of all text styles used in the application, including headings, paragraphs, and other text elements. The fonts are customized based on the selected language.',
        buttonDescription: 'Buttons allow users to take actions and make choices with a single tap. Here are the various types of buttons used in the system.',
        iconDescription: 'Icons are used to visually represent actions, objects, or concepts. We use the Ant Design Icons library.',
        gridDescription: 'The grid system uses a 24-column layout to provide a responsive and flexible structure for arranging content.',
        spaceDescription: 'Space is used to control the spacing between components, both horizontally and vertically.',
        dropdownDescription: 'A dropdown menu displays a list of choices when a user clicks on a button or trigger.',
        checkboxDescription: 'Checkboxes allow the user to select one or more items from a set.',
        tableDescription: 'A table displays rows of data. This example shows the order information list.',
        tagDescription: 'Tags are used for marking and categorization, such as order priority and status.',
        formDescription: 'The Form component provides data collection, validation, and submission functionality in a modal.',
        // Shared
        liveDemo: 'Live Demo',
        launchForm: 'Launch Order Creation Form',
        editHint: 'You can edit the description for this component here.',
        // Form Content
        createOrderTitle: 'Create New Agriculture Order',
        createOrderSubtitle: 'Crop supplies, equipment & logistics management',
        orderNumber: 'Order Number',
        customer: 'Customer',
        plannedDelivery: 'Planned Delivery Date',
        deliveryPurpose: 'Delivery Purpose',
        orderRemarks: 'Order Remarks',
        priorityLevel: 'Priority Level',
        farmLocation: 'Farm Location',
        autoGenerated: 'Auto-generated on save',
        pleaseSelect: 'Please select',
        selectDate: 'mm/dd/yy',
        selectPurpose: 'Please select delivery purpose',
        selectFarm: 'Select farm location...',
        expandInstructions: 'Click the expand button on each item to access pricing and remarks',
        expandAll: 'Expand All',
        collapseAll: 'Collapse All',
        agriculturalProduct: 'Agricultural Product',
        plannedQuantity: 'Planned Quantity',
        items: 'Items',
        completed: 'Completed',
        priority: 'Priority',
        total: 'Total',
        copyTemplate: 'Copy Template',
        importCSV: 'Import CSV',
        cancel: 'Cancel',
        createOrder: 'Create Order',
    },
    zh: {
        appTitle: '组件文档',
        overview: '概述',
        general: '通用',
        layout: '布局',
        dataDisplay: '数据展示',
        dataEntry: '数据录入',
        // Components
        typography: '排版',
        button: '按钮',
        icon: '图标',
        grid: '栅格',
        space: '间距',
        dropdown: '下拉菜单',
        checkbox: '复选框',
        table: '表格',
        tag: '标签',
        form: '表单',
        // Descriptions
        overviewDescription: '欢迎来到组件文档。这是一个实时设计系统，展示了我们应用程序的构建模块。请使用左侧的菜单在组件之间导航。',
        typographyDescription: '展示应用程序中使用的所有文本样式，包括标题、段落和其他文本元素。字体根据所选语言进行定制。',
        buttonDescription: '按钮允许用户通过单击来执行操作和做出选择。这是系统中使用的各种类型的按钮。',
        iconDescription: '图标用于直观地表示操作、对象或概念。我们使用 Ant Design 图标库。',
        gridDescription: '栅格系统采用24列布局，为内容排列提供了响应式和灵活的结构。',
        spaceDescription: '间距用于控制组件之间的水平和垂直间距。',
        dropdownDescription: '当用户单击按钮或触发器时，下拉菜单会显示一个选项列表。',
        checkboxDescription: '复选框允许用户从一个集合中选择一个或多个项目。',
        tableDescription: '表格用于展示多行数据。此示例展示了订单信息列表。',
        tagDescription: '标签用于标记和分类，例如订单优先级和状态。',
        formDescription: '表单组件在模态框中提供数据收集、验证和提交功能。',
        // Shared
        liveDemo: '现场演示',
        launchForm: '启动订单创建表单',
        editHint: '您可以在此处编辑此组件的描述。',
        // Form Content
        createOrderTitle: '创建新农业订单',
        createOrderSubtitle: '作物供应、设备和物流管理',
        orderNumber: '订单号',
        customer: '客户',
        plannedDelivery: '计划交货日期',
        deliveryPurpose: '交货目的',
        orderRemarks: '订单备注',
        priorityLevel: '优先级',
        farmLocation: '农场位置',
        autoGenerated: '保存时自动生成',
        pleaseSelect: '请选择',
        selectDate: '月/日/年',
        selectPurpose: '请选择交货目的',
        selectFarm: '选择农场位置...',
        expandInstructions: '点击每个项目上的展开按钮以访问定价和备注',
        expandAll: '全部展开',
        collapseAll: '全部折叠',
        agriculturalProduct: '农产品',
        plannedQuantity: '计划数量',
        items: '项目',
        completed: '已完成',
        priority: '优先',
        total: '总计',
        copyTemplate: '复制模板',
        importCSV: '导入CSV',
        cancel: '取消',
        createOrder: '创建订单',
    }
};

// --- DOCUMENTATION COMPONENTS ---

const CodeBlock = ({ children }) => (
    <Collapse bordered={false} style={{marginTop: 24}}>
        <Panel header={<Text><CodeOutlined /> Show Code</Text>} key="1" style={{background: '#f7f7f7', border: '1px solid #d9d9d9', borderRadius: '2px'}}>
            <pre style={{ margin: 0, background: '#2d2d2d', color: '#f8f8f2', padding: 16, borderRadius: 4, whiteSpace: 'pre-wrap', wordBreak: 'break-all' }}>
                <code>{children}</code>
            </pre>
        </Panel>
    </Collapse>
);

const FormDocumentation = ({ t, language, content, setContent }) => {
    const [isModalVisible, setIsModalVisible] = useState(false);
    const [form] = Form.useForm();
    const showModal = () => setIsModalVisible(true);
    const handleCancel = () => setIsModalVisible(false);
    const onFinish = (values) => {
        console.log('Form Values:', values);
        setIsModalVisible(false);
        Modal.success({ title: 'Order Created!', content: 'The new agriculture order has been successfully submitted.' });
    };
    const handleCreate = () => form.submit();

    return (
        <>
            <Button type="primary" onClick={showModal}>{t.launchForm}</Button>
            <Modal open={isModalVisible} onCancel={handleCancel} width={960} closable={false} title={null} footer={null} styles={{ body: { padding: 0, backgroundColor: '#f0f2f5' } }}>
                <div style={{ padding: '16px 24px', borderBottom: '1px solid #e8e8e8', backgroundColor: '#fff' }}>
                    <Row justify="space-between" align="middle">
                        <Col><Space align="center" size="middle"><Avatar shape="square" size={48} style={{ backgroundColor: '#27ae60' }} icon={<ContainerOutlined />} /><div><Title level={4} style={{ margin: 0 }}>{t.createOrderTitle}</Title><Text type="secondary">{t.createOrderSubtitle}</Text></div></Space></Col>
                        <Col><Space><Select value={language} onChange={(lang) => setContent({ ...content, currentLang: lang })} suffixIcon={<GlobalOutlined />}><Option value="en">English</Option><Option value="zh">中文</Option></Select><Button type="text" icon={<CloseOutlined />} onClick={handleCancel} /></Space></Col>
                    </Row>
                </div>
                <div style={{ padding: '24px', maxHeight: '65vh', overflowY: 'auto' }}>
                    <Form form={form} layout="vertical" onFinish={onFinish} initialValues={{ items: [{ product: 'Soybeans - Premium Grade', quantity: 1000 }] }}>
                        <Row gutter={24}>
                            <Col span={8}><Form.Item label={t.orderNumber}><Input value={t.autoGenerated} disabled /></Form.Item></Col>
                            <Col span={8}><Form.Item name="customer" label={t.customer} rules={[{ required: true }]}><Select placeholder={t.pleaseSelect}><Option value="cust1">Customer A</Option></Select></Form.Item></Col>
                            <Col span={8}><Form.Item name="plannedDeliveryDate" label={t.plannedDelivery} rules={[{ required: true }]}><DatePicker style={{ width: '100%' }} placeholder={t.selectDate} /></Form.Item></Col>
                            <Col span={8}><Form.Item name="deliveryPurpose" label={t.deliveryPurpose} rules={[{ required: true }]}><Select placeholder={t.selectPurpose}><Option value="comm">Commercial</Option></Select></Form.Item></Col>
                            <Col span={5}><Form.Item name="orderRemarks" label={t.orderRemarks}><Select placeholder={t.pleaseSelect} suffixIcon={<EditOutlined />}><Option value="1">Remark 1</Option></Select></Form.Item></Col>
                            <Col span={5}><Form.Item name="priorityLevel" label={t.priorityLevel}><Select defaultValue="normal"><Option value="normal">Normal Priority</Option></Select></Form.Item></Col>
                            <Col span={6}><Form.Item name="farmLocation" label={t.farmLocation} rules={[{ required: true }]}><Select placeholder={t.selectFarm}><Option value="loc1">Farm Location 1</Option></Select></Form.Item></Col>
                        </Row>
                        <Alert type="info" message={<Row justify="space-between"><Col>{t.expandInstructions}</Col><Col><Link style={{marginRight: 8}}>{t.expandAll}</Link><Link>{t.collapseAll}</Link></Col></Row>} style={{marginBottom: 16}} />
                        <Collapse bordered={false} defaultActiveKey={['1']} style={{ background: 'transparent' }}>
                            <Panel key="1" showArrow={false} style={{ background: '#fff', border: '1px solid #d9d9d9', borderRadius: 4, marginBottom: 16 }} header={<Row justify="space-between" align="middle" style={{width: '100%'}}><Col><Space><Text strong>1</Text><Tag color="green">Complete</Tag><Tag color="blue">Seasonal</Tag></Space></Col><Col><Space><Text strong>$2500.00</Text><Button type="text" danger icon={<DeleteOutlined />} /><Button type="text" icon={<CaretDownOutlined />} /></Space></Col></Row>}>
                                <Divider style={{margin: '0 0 16px 0'}}/>
                                <Form.List name="items">{(fields) => (<>{fields.map(({ key, name, ...restField }) => (<div key={key}><Form.Item {...restField} name={[name, 'product']} label={t.agriculturalProduct} rules={[{ required: true }]}><Select placeholder={t.pleaseSelect}><Option value="Soybeans - Premium Grade">Soybeans - Premium Grade</Option></Select></Form.Item><Form.Item {...restField} name={[name, 'quantity']} label={t.plannedQuantity} rules={[{ required: true }]}><InputNumber placeholder="1000" style={{ width: '100%' }} addonAfter="Kg" /></Form.Item></div>))}</>)}</Form.List>
                            </Panel>
                        </Collapse>
                    </Form>
                </div>
                <div style={{ padding: '16px 24px', borderTop: '1px solid #e8e8e8', backgroundColor: '#fff' }}>
                    <Row justify="space-between" align="middle">
                        <Col><Text>{t.items}: <Tag>3</Tag></Text><Text style={{marginLeft: 8}}>{t.completed}: <Tag>3</Tag></Text><Text style={{marginLeft: 8}}>{t.priority}: <Tag>Normal</Tag></Text><Text strong style={{marginLeft: 8}}>{t.total}: $25000.00</Text></Col>
                        <Col><Space><Button icon={<CopyOutlined />}>{t.copyTemplate}</Button><Button icon={<ImportOutlined />}>{t.importCSV}</Button><Button onClick={handleCancel}>{t.cancel}</Button><Button type="primary" icon={<PlusOutlined />} onClick={handleCreate}>{t.createOrder}</Button></Space></Col>
                    </Row>
                </div>
            </Modal>
        </>
    );
};

const componentDocs = {
    overview: { demo: null, code: null },
    typography: { demo: <Card><Space direction="vertical" size="large"><Title level={1}>H1. Ant Design (38/46)</Title><Title level={2}>H2. Ant Design (30/38)</Title><Title level={3}>H3. Ant Design (24/32)</Title><Title level={4}>H4. Ant Design (20/28)</Title><Title level={5}>H5. Ant Design (16/24)</Title><div><Text>Base Normal (14/22)</Text><br/><Text strong>Base Strong (14/22)</Text><br/><Text underline>Base Underline (14/22)</Text><br/><Text italic>Base Italic (14/22)</Text></div></Space></Card>, code: `// Set in ConfigProvider theme\n<Title level={1}>H1. Title</Title>\n<Text>Base Text</Text>` },
    button: { demo: <Card><Space wrap><Button type="primary">Primary</Button><Button>Default</Button><Button type="dashed">Dashed</Button><Button type="text">Text</Button><Button type="link">Link</Button></Space></Card>, code: `<Button type="primary">Primary</Button>` },
    icon: { demo: <Card><Space size="large" wrap><HomeOutlined style={{fontSize: 24}} /><UserOutlined style={{fontSize: 24}} /><SettingOutlined style={{fontSize: 24}} /><SearchOutlined style={{fontSize: 24}} /><CopyOutlined style={{fontSize: 24}} /><DeleteOutlined style={{fontSize: 24}} /></Space></Card>, code: `import { HomeOutlined } from '@ant-design/icons';\n<HomeOutlined />` },
    grid: { demo: <Card><Row gutter={[16, 16]}><Col span={12}><div style={{background: '#27ae6033', padding: '8px', borderRadius: 4}}>col-12</div></Col><Col span={12}><div style={{background: '#27ae6033', padding: '8px', borderRadius: 4}}>col-12</div></Col><Col span={6}><div style={{background: '#27ae6033', padding: '8px', borderRadius: 4}}>col-6</div></Col><Col span={6}><div style={{background: '#27ae6033', padding: '8px', borderRadius: 4}}>col-6</div></Col><Col span={6}><div style={{background: '#27ae6033', padding: '8px', borderRadius: 4}}>col-6</div></Col><Col span={6}><div style={{background: '#27ae6033', padding: '8px', borderRadius: 4}}>col-6</div></Col></Row></Card>, code: `<Row gutter={16}>\n  <Col span={12}>...</Col>\n  <Col span={12}>...</Col>\n</Row>` },
    space: { demo: <Card><Space direction="vertical"><Space><Button>A</Button><Button>B</Button><Button>C</Button></Space><Space direction="horizontal" size="large"><Button>A</Button><Button>B</Button><Button>C</Button></Space></Space></Card>, code: `<Space size="large">...</Space>` },
    dropdown: { demo: <Card><Dropdown overlay={<Menu><Menu.Item key="1">Item 1</Menu.Item><Menu.Item key="2">Item 2</Menu.Item></Menu>}><Button>Hover me <DownOutlined /></Button></Dropdown></Card>, code: `<Dropdown overlay={menu}>...</Dropdown>` },
    checkbox: { demo: <Card><Space direction="vertical"><Checkbox>Single Checkbox</Checkbox><Checkbox.Group options={['Apple', 'Pear', 'Orange']} defaultValue={['Apple']} /></Space></Card>, code: `<Checkbox>Label</Checkbox>\n<Checkbox.Group options={...} />` },
    table: { demo: <Card><Table columns={[ { title: 'ORDER NUMBER', dataIndex: 'orderNumber' }, { title: 'CUSTOMER', dataIndex: 'customer' }, { title: 'PLANNED DELIVERY', dataIndex: 'plannedDelivery' }, { title: 'PRIORITY', dataIndex: 'priority', render: (p) => <PriorityTag priority={p} /> }, { title: 'STATUS', dataIndex: 'status', render: (s) => <StatusTag status={s} /> }, ]} dataSource={inventoryData} pagination={{ pageSize: 5 }} /></Card>, code: `<Table columns={...} dataSource={...} />` },
    tag: { demo: <Card><Space><PriorityTag priority="urgent" /><StatusTag status="collected" /></Space></Card>, code: `<Tag color="volcano">Urgent</Tag>` },
    form: { demo: FormDocumentation, code: `<Modal><Form>...</Form></Modal>` },
};

// --- MAIN APP ---
const App = () => {
  const [selectedKey, setSelectedKey] = useState('overview');
  const [content, setContent] = useState({ ...initialContent, currentLang: 'en' });
  const [isEditing, setIsEditing] = useState(false);
  const [tempContent, setTempContent] = useState(null);

  const t = content[content.currentLang];
  const descriptionKey = `${selectedKey}Description`;
  
  const handleEdit = () => {
      setTempContent(content);
      setIsEditing(true);
  };
  
  const handleSave = () => {
      setContent(tempContent);
      setIsEditing(false);
      setTempContent(null);
  };

  const handleCancelEdit = () => {
      setIsEditing(false);
      setTempContent(null);
  };

  const handleContentChange = (key, value) => {
      setTempContent(prev => ({
          ...prev,
          [content.currentLang]: {
              ...prev[content.currentLang],
              [key]: value,
          }
      }));
  };

  const selectedDoc = componentDocs[selectedKey];
  const DemoComponent = selectedDoc?.demo;

  const getFontFamily = () => {
      return content.currentLang === 'zh' ? "'Source Han Sans CN', sans-serif" : "'Quicksand', sans-serif";
  };

  return (
    <>
      <style>{`
        @import url('https://fonts.googleapis.com/css2?family=Quicksand:wght@400;700&family=Source+Han+Sans+CN:wght@400;700&display=swap');
        body { font-family: ${getFontFamily()}; }
      `}</style>
      <ConfigProvider 
        theme={{ 
          token: { 
            colorPrimary: '#27ae60', 
            colorLink: '#27ae60',
            fontFamily: getFontFamily(),
          },
          components: {
            Typography: {
              fontSizeHeading1: 38, lineHeightHeading1: 46/38,
              fontSizeHeading2: 30, lineHeightHeading2: 38/30,
              fontSizeHeading3: 24, lineHeightHeading3: 32/24,
              fontSizeHeading4: 20, lineHeightHeading4: 28/20,
              fontSizeHeading5: 16, lineHeightHeading5: 24/16,
            }
          }
        }}
      >
        <Layout style={{ minHeight: '100vh' }}>
          <Header style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', background: '#fff', borderBottom: '1px solid #f0f0f0', padding: '0 24px' }}>
              <Title level={3} style={{ color: '#27ae60', margin: 0 }}><AppstoreOutlined style={{marginRight: 8}}/>{t.appTitle}</Title>
              <Select value={content.currentLang} onChange={(lang) => setContent({ ...content, currentLang: lang })}>
                  <Option value="en">English</Option>
                  <Option value="zh">中文</Option>
              </Select>
          </Header>
          <Layout>
            <Sider width={240} style={{ background: '#fff', borderRight: '1px solid #f0f0f0' }}>
              <Menu mode="inline" selectedKeys={[selectedKey]} style={{ height: '100%', borderRight: 0 }} onClick={({key}) => setSelectedKey(key)}>
                <Menu.Item key="overview">{t.overview}</Menu.Item>
                <Menu.ItemGroup key="g1" title={t.general}><Menu.Item key="button">{t.button}</Menu.Item><Menu.Item key="icon">{t.icon}</Menu.Item><Menu.Item key="typography">{t.typography}</Menu.Item></Menu.ItemGroup>
                <Menu.ItemGroup key="g2" title={t.layout}><Menu.Item key="grid">{t.grid}</Menu.Item><Menu.Item key="space">{t.space}</Menu.Item></Menu.ItemGroup>
                <Menu.ItemGroup key="g3" title={t.dataDisplay}><Menu.Item key="table">{t.table}</Menu.Item><Menu.Item key="tag">{t.tag}</Menu.Item><Menu.Item key="dropdown">{t.dropdown}</Menu.Item></Menu.ItemGroup>
                <Menu.ItemGroup key="g4" title={t.dataEntry}><Menu.Item key="form">{t.form}</Menu.Item><Menu.Item key="checkbox">{t.checkbox}</Menu.Item></Menu.ItemGroup>
              </Menu>
            </Sider>
            <Content style={{ padding: '24px', background: '#fff', display: 'flex' }}>
               <div style={{ flex: 1, minWidth: 0, paddingRight: '24px' }}>
                    <Space style={{marginBottom: 16}}>
                        {isEditing ? (
                            <Input value={tempContent[content.currentLang][selectedKey]} onChange={(e) => handleContentChange(selectedKey, e.target.value)} style={{width: 300}} />
                        ) : (
                            <Title id="overview" style={{margin: 0}}>{t[selectedKey]}</Title>
                        )}
                        {isEditing ? (
                            <Space>
                                <Button type="primary" icon={<SaveOutlined />} onClick={handleSave}>Save</Button>
                                <Button icon={<CloseOutlined />} onClick={handleCancelEdit}>Cancel</Button>
                            </Space>
                        ) : (
                            <Button type="text" icon={<EditOutlined />} onClick={handleEdit} />
                        )}
                    </Space>
                    {isEditing ? (
                        <>
                          <TextArea rows={10} value={tempContent[content.currentLang][descriptionKey]} onChange={(e) => handleContentChange(descriptionKey, e.target.value)} />
                          <Text type="secondary">{t.editHint}</Text>
                        </>
                    ) : (
                        <div className="markdown-body">
                           <pre style={{ whiteSpace: 'pre-wrap', fontFamily: 'inherit', margin: 0 }}>{t[descriptionKey]}</pre>
                        </div>
                    )}
                    {selectedDoc?.demo && <><Title level={2} id="demo">{t.liveDemo}</Title>{typeof DemoComponent === 'function' ? <DemoComponent t={t} language={content.currentLang} content={content} setContent={setContent} /> : DemoComponent}</>}
                    {selectedDoc?.code && <CodeBlock>{selectedDoc.code}</CodeBlock>}
               </div>
               <div style={{ width: 200, flexShrink: 0 }}>
                    <Anchor affix={true} offsetTop={80} targetOffset={80}>
                        <AnchorLink href="#overview" title={t[selectedKey]} />
                        {selectedDoc?.demo && <AnchorLink href="#demo" title={t.liveDemo} />}
                    </Anchor>
               </div>
            </Content>
          </Layout>
        </Layout>
      </ConfigProvider>
    </>
  );
};

export default App;
