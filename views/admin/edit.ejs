<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit <%= pageKey %> - Cosmos Codex Admin</title>
    <link href="https://fonts.googleapis.com/css2?family=Quicksand:wght@400;700&family=Source+Han+Sans+CN:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Quicksand', sans-serif;
            margin: 0;
            padding: 0;
            background: #f0f2f5;
        }
        
        .admin-header {
            background: white;
            padding: 16px 24px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .admin-title {
            font-size: 24px;
            font-weight: 600;
            color: #29B463;
            margin: 0;
            display: flex;
            align-items: center;
        }
        
        .admin-title-icon {
            margin-right: 8px;
        }
        
        .admin-nav {
            display: flex;
            gap: 16px;
            align-items: center;
        }
        
        .admin-nav a {
            color: #666;
            text-decoration: none;
            padding: 8px 16px;
            border-radius: 6px;
            transition: all 0.3s;
        }
        
        .admin-nav a:hover {
            background: #e6f7ff;
            color: #29B463;
        }
        
        .edit-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 24px;
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 24px;
            height: calc(100vh - 120px);
        }
        
        .edit-panel {
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }
        
        .panel-header {
            padding: 16px 24px;
            border-bottom: 1px solid #f0f0f0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .panel-title {
            font-size: 18px;
            font-weight: 600;
            margin: 0;
            color: #333;
        }
        
        .panel-content {
            flex: 1;
            padding: 24px;
            overflow: auto;
        }
        
        .form-group {
            margin-bottom: 16px;
        }
        
        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #333;
        }
        
        .form-input {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid #d9d9d9;
            border-radius: 6px;
            font-size: 14px;
            box-sizing: border-box;
        }
        
        .form-textarea {
            width: 100%;
            /* Increased height for better editing experience */
            height: calc(100vh - 380px);
            min-height: 300px;
            padding: 12px;
            border: 1px solid #d9d9d9;
            border-radius: 6px;
            font-size: 16px; /* Increased font size */
            line-height: 1.6; /* Better line height for readability */
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            resize: none;
            box-sizing: border-box;
        }
        
        .form-input:focus,
        .form-textarea:focus {
            outline: none;
            border-color: #29B463;
            box-shadow: 0 0 0 2px rgba(41, 180, 99, 0.2);
        }
        
        .button-group {
            display: flex;
            gap: 12px;
            margin-top: 16px;
            flex-wrap: wrap;
        }
        
        .button {
            padding: 10px 20px;
            border: none;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }
        
        .button-primary {
            background: #29B463;
            color: white;
        }
        
        .button-primary:hover {
            background: #27ae60;
        }
        
        .button-secondary {
            background: #f0f2f5;
            color: #666;
        }
        
        .button-secondary:hover {
            background: #d9d9d9;
        }
        
        .markdown-tools {
            margin-bottom: 12px;
            display: flex;
            gap: 6px;
            flex-wrap: wrap;
            background: #f9f9f9;
            padding: 8px;
            border-radius: 6px;
            position: sticky;
            top: 0;
            z-index: 10;
        }
        
        .markdown-tool {
            width: 36px;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 16px;
            background: #fff;
            border: 1px solid #d9d9d9;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .markdown-tool:hover {
            background: #e6f7ff;
            border-color: #29B463;
            color: #29B463;
        }
        
        .markdown-tool-separator {
            width: 1px;
            height: 24px;
            background: #d9d9d9;
            margin: 0 4px;
        }
        
        .markdown-body {
            line-height: 1.6;
            color: #333;
            font-family: 'Quicksand', sans-serif;
            font-size: 16px; /* Increased for readability */
            padding: 16px;
        }
        
        .markdown-body[lang="zh"] {
            font-family: 'Source Han Sans CN', sans-serif;
        }
        
        .markdown-body h1,
        .markdown-body h2,
        .markdown-body h3,
        .markdown-body h4,
        .markdown-body h5,
        .markdown-body h6 {
            margin-top: 24px;
            margin-bottom: 16px;
            font-weight: 600;
            color: #29B463;
        }
        
        .markdown-body h1 {
            font-size: 32px;
        }
        
        .markdown-body h2 {
            font-size: 24px;
        }
        
        .markdown-body h3 {
            font-size: 20px;
        }
        
        .markdown-body p {
            margin-bottom: 16px;
        }
        
        .markdown-body ul,
        .markdown-body ol {
            margin-bottom: 16px;
            padding-left: 32px;
        }
        
        .markdown-body li {
            margin-bottom: 8px;
        }
        
        .markdown-body img {
            max-width: 100%;
            height: auto;
        }
        
        .markdown-body code {
            background: #f0f2f5;
            padding: 2px 6px;
            border-radius: 4px;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
        }
        
        .markdown-body pre {
            background: #f0f2f5;
            padding: 16px;
            border-radius: 6px;
            overflow-x: auto;
        }
        
        .success-message {
            background: #f6ffed;
            border: 1px solid #b7eb8f;
            color: #52c41a;
            padding: 12px;
            border-radius: 6px;
            margin-bottom: 16px;
        }
        
        .error-message {
            background: #fff2f0;
            border: 1px solid #ffccc7;
            color: #ff4d4f;
            padding: 12px;
            border-radius: 6px;
            margin-bottom: 16px;
        }
        
        /* Editor layout improvements */
        .editor-section {
            display: flex;
            flex-direction: column;
            height: 100%;
        }
        
        .editor-metadata {
            margin-bottom: 16px;
        }
        
        .editor-content {
            flex: 1;
            display: flex;
            flex-direction: column;
        }
        
        @media (max-width: 768px) {
            .edit-container {
                grid-template-columns: 1fr;
                height: auto;
            }
            
            .form-textarea {
                height: 400px;
            }
        }
    </style>
</head>
<body>
    <header class="admin-header">
        <h1 class="admin-title"><span class="admin-title-icon">⬢</span> Edit: <%= pageKey %> (<%= language %>)</h1>
        <nav class="admin-nav">
            <a href="/admin">Dashboard</a>
            <a href="/docs/<%= pageKey %>?lang=<%= language %>" target="_blank">View Page</a>
            <a href="/admin/logout">Logout</a>
        </nav>
    </header>

    <div class="edit-container">
        <!-- Editor Panel -->
        <div class="edit-panel">
            <div class="panel-header">
                <h2 class="panel-title">Editor</h2>
                <div class="button-group">
                    <button type="button" class="button button-secondary" onclick="uploadImage()">📷 Upload Image</button>
                </div>
            </div>
            <div class="panel-content">
                <form id="edit-form" class="editor-section">
                    <div class="editor-metadata">
                        <div class="form-group">
                            <label for="title" class="form-label">Page Title</label>
                            <input 
                                type="text" 
                                id="title" 
                                name="title" 
                                class="form-input" 
                                value="<%= content && content.frontMatter ? content.frontMatter.title || '' : '' %>"
                            >
                        </div>
                        
                        <div class="form-group">
                            <label for="category" class="form-label">Category</label>
                            <input 
                                type="text" 
                                id="category" 
                                name="category" 
                                class="form-input" 
                                value="<%= content && content.frontMatter ? content.frontMatter.category || 'general' : 'general' %>"
                            >
                        </div>
                        
                        <div class="form-group">
                            <label for="order" class="form-label">Order</label>
                            <input 
                                type="number" 
                                id="order" 
                                name="order" 
                                class="form-input" 
                                value="<%= content && content.frontMatter ? content.frontMatter.order || 999 : 999 %>"
                            >
                        </div>
                    </div>
                    
                    <div class="editor-content">
                        <label for="content" class="form-label">Content (Markdown)</label>
                        
                        <div class="markdown-tools">
                            <button type="button" class="markdown-tool" title="Bold" onclick="applyMarkdown('**', '**')"><strong>B</strong></button>
                            <button type="button" class="markdown-tool" title="Italic" onclick="applyMarkdown('*', '*')"><em>I</em></button>
                            <div class="markdown-tool-separator"></div>
                            <button type="button" class="markdown-tool" title="Heading 1" onclick="applyMarkdown('# ')">H1</button>
                            <button type="button" class="markdown-tool" title="Heading 2" onclick="applyMarkdown('## ')">H2</button>
                            <button type="button" class="markdown-tool" title="Heading 3" onclick="applyMarkdown('### ')">H3</button>
                            <div class="markdown-tool-separator"></div>
                            <button type="button" class="markdown-tool" title="Bulleted List" onclick="applyMarkdown('- ')">•</button>
                            <button type="button" class="markdown-tool" title="Numbered List" onclick="applyMarkdown('1. ')">1.</button>
                            <div class="markdown-tool-separator"></div>
                            <button type="button" class="markdown-tool" title="Link" onclick="applyMarkdown('[', '](url)')">🔗</button>
                            <button type="button" class="markdown-tool" title="Code" onclick="applyMarkdown('`', '`')">〈〉</button>
                            <button type="button" class="markdown-tool" title="Quote" onclick="applyMarkdown('> ')">❝</button>
                            <div class="markdown-tool-separator"></div>
                            <button type="button" class="markdown-tool" title="Horizontal Line" onclick="applyMarkdown('\n\n---\n\n')">―</button>
                        </div>
                        
                        <textarea 
                            id="content" 
                            name="content" 
                            class="form-textarea"
                            placeholder="Enter your markdown content here..."
                        ><%= content ? content.content : '' %></textarea>
                        
                        <div class="button-group">
                            <button type="button" class="button button-primary" onclick="saveContent()">💾 Save</button>
                            <button type="button" class="button button-secondary" onclick="previewContent()">👁️ Preview</button>
                            <a href="/admin" class="button button-secondary">← Back to Dashboard</a>
                        </div>
                    </div>
                </form>
                
                <div id="message-container"></div>
            </div>
        </div>

        <!-- Preview Panel -->
        <div class="edit-panel">
            <div class="panel-header">
                <h2 class="panel-title">Preview</h2>
                <button type="button" class="button button-secondary" onclick="previewContent()">🔄 Refresh</button>
            </div>
            <div class="panel-content">
                <div id="preview-content" class="markdown-body" lang="<%= language %>">
                    <% if (content) { %>
                        <%- content.html %>
                    <% } else { %>
                        <p style="color: #666;">Enter content and click Preview to see the rendered output.</p>
                    <% } %>
                </div>
            </div>
        </div>
    </div>

    <!-- Hidden file input for image uploads -->
    <input type="file" id="file-input" accept="image/*" style="display: none;">

    <script>
        function showMessage(message, type = 'success') {
            const container = document.getElementById('message-container');
            const messageDiv = document.createElement('div');
            messageDiv.className = type === 'success' ? 'success-message' : 'error-message';
            messageDiv.textContent = message;
            
            container.innerHTML = '';
            container.appendChild(messageDiv);
            
            setTimeout(() => {
                container.innerHTML = '';
            }, 5000);
        }

        async function saveContent() {
            const form = document.getElementById('edit-form');
            const title = document.getElementById('title').value;
            const category = document.getElementById('category').value;
            const order = parseInt(document.getElementById('order').value) || 999;
            const content = document.getElementById('content').value;
            
            const contentData = {
                language: '<%= language %>',
                content: content,
                frontMatter: {
                    title: title,
                    category: category,
                    order: order
                }
            };
            
            try {
                const response = await fetch('/api/content/<%= pageKey %>', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(contentData)
                });
                
                if (response.ok) {
                    showMessage('Content saved successfully!', 'success');
                    previewContent();
                } else {
                    showMessage('Error saving content. Please try again.', 'error');
                }
            } catch (error) {
                showMessage('Error saving content: ' + error.message, 'error');
            }
        }

        async function previewContent() {
            const content = document.getElementById('content').value;
            
            try {
                const previewHTML = markdownToHTML(content);
                document.getElementById('preview-content').innerHTML = previewHTML;
            } catch (error) {
                showMessage('Error previewing content: ' + error.message, 'error');
            }
        }
        
        function markdownToHTML(markdown) {
            // This is a simple markdown converter - for a complete solution, use a proper markdown library
            return markdown
                // Headers
                .replace(/^# (.*$)/gim, '<h1>$1</h1>')
                .replace(/^## (.*$)/gim, '<h2>$1</h2>')
                .replace(/^### (.*$)/gim, '<h3>$1</h3>')
                .replace(/^#### (.*$)/gim, '<h4>$1</h4>')
                // Lists
                .replace(/^\* (.*$)/gim, '<ul><li>$1</li></ul>')
                .replace(/^- (.*$)/gim, '<ul><li>$1</li></ul>')
                .replace(/^(\d+)\. (.*$)/gim, '<ol><li>$2</li></ol>')
                // Fix lists (combine consecutive list items)
                .replace(/<\/ul>\s*<ul>/g, '')
                .replace(/<\/ol>\s*<ol>/g, '')
                // Format
                .replace(/\*\*(.*)\*\*/gim, '<strong>$1</strong>')
                .replace(/\*(.*)\*/gim, '<em>$1</em>')
                .replace(/`([^`]+)`/g, '<code>$1</code>')
                // Links & Images
                .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank">$1</a>')
                .replace(/!\[([^\]]+)\]\(([^)]+)\)/g, '<img src="$2" alt="$1">')
                // Blockquotes
                .replace(/^> (.*$)/gim, '<blockquote>$1</blockquote>')
                // Horizontal rules
                .replace(/^---$/gim, '<hr>')
                // Paragraphs
                .replace(/\n\s*\n/g, '</p><p>')
                // Line breaks
                .replace(/\n/g, '<br>');
        }

        function uploadImage() {
            document.getElementById('file-input').click();
        }

        document.getElementById('file-input').addEventListener('change', async function(e) {
            const file = e.target.files[0];
            if (!file) return;
            
            const formData = new FormData();
            formData.append('file', file);
            
            try {
                const response = await fetch('/api/upload', {
                    method: 'POST',
                    body: formData
                });
                
                if (response.ok) {
                    const result = await response.json();
                    const imageMarkdown = `![${file.name}](${result.url})`;
                    
                    // Insert image markdown at cursor position
                    const textarea = document.getElementById('content');
                    const cursorPos = textarea.selectionStart;
                    const textBefore = textarea.value.substring(0, cursorPos);
                    const textAfter = textarea.value.substring(cursorPos);
                    
                    textarea.value = textBefore + imageMarkdown + textAfter;
                    textarea.focus();
                    textarea.setSelectionRange(cursorPos + imageMarkdown.length, cursorPos + imageMarkdown.length);
                    
                    showMessage('Image uploaded successfully!', 'success');
                } else {
                    showMessage('Error uploading image. Please try again.', 'error');
                }
            } catch (error) {
                showMessage('Error uploading image: ' + error.message, 'error');
            }
        });
        
        // Function to apply markdown formatting to selected text
        function applyMarkdown(prefix, suffix = '') {
            const textarea = document.getElementById('content');
            const start = textarea.selectionStart;
            const end = textarea.selectionEnd;
            const selectedText = textarea.value.substring(start, end);
            
            let newText;
            let newCursorPos;
            
            if (selectedText) {
                // If text is selected, wrap it with prefix and suffix
                newText = textarea.value.substring(0, start) + prefix + selectedText + suffix + textarea.value.substring(end);
                newCursorPos = end + prefix.length + suffix.length;
            } else {
                // If no text is selected, insert prefix and suffix at cursor position
                newText = textarea.value.substring(0, start) + prefix + suffix + textarea.value.substring(end);
                newCursorPos = start + prefix.length;
                
                // If suffix is provided, place cursor between prefix and suffix
                if (suffix) {
                    newCursorPos = start + prefix.length;
                }
            }
            
            textarea.value = newText;
            textarea.focus();
            
            // Set cursor position
            if (suffix && !selectedText) {
                textarea.setSelectionRange(newCursorPos, newCursorPos);
            } else {
                textarea.setSelectionRange(newCursorPos, newCursorPos);
            }
            
            // Preview content after formatting is applied
            previewContent();
        }

        // Auto-save functionality
        let autoSaveTimeout;
        document.getElementById('content').addEventListener('input', function() {
            clearTimeout(autoSaveTimeout);
            autoSaveTimeout = setTimeout(() => {
                previewContent();
            }, 1000);
        });
        
        // Add keyboard shortcuts for common operations
        document.getElementById('content').addEventListener('keydown', function(e) {
            // Save with Ctrl+S or Cmd+S
            if ((e.ctrlKey || e.metaKey) && e.key === 's') {
                e.preventDefault();
                saveContent();
            }
            
            // Preview with Ctrl+P or Cmd+P
            if ((e.ctrlKey || e.metaKey) && e.key === 'p') {
                e.preventDefault();
                previewContent();
            }
            
            // Bold with Ctrl+B or Cmd+B
            if ((e.ctrlKey || e.metaKey) && e.key === 'b') {
                e.preventDefault();
                applyMarkdown('**', '**');
            }
            
            // Italic with Ctrl+I or Cmd+I
            if ((e.ctrlKey || e.metaKey) && e.key === 'i') {
                e.preventDefault();
                applyMarkdown('*', '*');
            }
        });
        
        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            // Auto-preview on load
            previewContent();
            
            // Set focus to textarea
            setTimeout(() => {
                document.getElementById('content').focus();
            }, 500);
        });
    </script>
</body>
</html>